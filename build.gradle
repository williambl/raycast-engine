import org.gradle.internal.os.OperatingSystem

buildscript {
    ext.kotlin_version = '1.4.10'
    ext.lwjglVersion = '3.2.3'
    ext.imguiVersion = '1.76'

    switch (OperatingSystem.current()) {
        case OperatingSystem.WINDOWS:
            ext.lwjglNatives = "natives-windows"
            break
        case OperatingSystem.LINUX:
            ext.lwjglNatives = "natives-linux"
            break
        case OperatingSystem.MAC_OS:
            ext.lwjglNatives = "natives-macos"
            break
    }

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.4.10' //unfortunately cannot use $kotlin_version for this
    id 'application'
}

group 'com.williambl'
version '1.0-SNAPSHOT'

application {
    mainClassName = 'com.williambl.raycastengine.Main'
    startScripts.classpath += files('$APP_HOME/mods/*')
    
    if (OperatingSystem.current() == OperatingSystem.MAC_OS)
        applicationDefaultJvmArgs.push("-XstartOnFirstThread")
}

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url 'https://jitpack.io' }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    compile group: 'org.reflections', name: 'reflections', version: '0.9.11'

    compile group: 'io.netty', name: 'netty-all', version: '4.1.50.Final'

    implementation 'com.beust:klaxon:5.0.1'

    ["gl", "glfw", "core"].each {
        api "com.github.kotlin-graphics.imgui:imgui-$it:${imguiVersion}"
    }
    implementation 'com.github.kotlin-graphics:uno-sdk:f528113bf45e43406953d6881915467d85a20881'
    implementation 'com.github.kotlin-graphics.glm:glm:1b4ac18dd1a3c23440d3f33596688aac60bc0141'

    compile "org.lwjgl:lwjgl:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-assimp:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-bgfx:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-egl:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-glfw:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-jawt:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-jemalloc:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-lmdb:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-nanovg:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-nfd:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-nuklear:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-openal:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-opencl:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-opengl:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-opengles:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-par:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-sse:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-stb:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-tinyfd:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-xxhash:${lwjglVersion}"

    runtime "org.lwjgl:lwjgl:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-assimp:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-bgfx:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-glfw:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-jemalloc:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-lmdb:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-nanovg:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-nfd:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-nuklear:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-openal:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-opengl:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-opengles:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-par:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-sse:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-stb:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-tinyfd:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-xxhash:${lwjglVersion}:${lwjglNatives}"
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs += "-Xuse-experimental=kotlin.Experimental"
    }
}


